/* Copyright 2012-2016 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at:
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

grammar software.amazon.ionxtext.Ion

hidden(WS, SL_COMMENT, ML_COMMENT)

generate ion "http://www.amazon.software/ionxtext/Ion"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore



Datagram:
    values+=Value*
;

Value:
      {Null}      annot+=Annotation* value=Null_value
    | {Bool}      annot+=Annotation* value=Bool_value
    | {Int}       annot+=Annotation* value=Int_value
    | {Float}     annot+=Annotation* value=Float_value
    | {Decimal}   annot+=Annotation* value=Decimal_value
    | {Timestamp} annot+=Annotation* value=Timestamp_value
    | {Symbol}    annot+=Annotation* value=Symbol_value
    | {String}    annot+=Annotation* value=String_value
    | {Clob}      annot+=Annotation* value=Clob_value
    | {Blob}      annot+=Annotation* value=Blob_value
    | Struct
    | List
    | Sexp
    | {BadInt}       content=BAD_INT
    | {BadFloat}     content=BAD_FLOAT
    | {BadDecimal}   content=BAD_DECIMAL
    | {BadTimestamp} content=BAD_TIMESTAMP
    | {BadNulltype}  content=BAD_NULLTYPE
;

Null_value:
    NULL
;

Bool_value:
    (BOOL | BOOL_NULL)
;

Int_value:
    (INT | INT_NULL)
;

Float_value:
    (FLOAT | FLOAT_NULL)
;

Decimal_value:
    (DECIMAL | DECIMAL_NULL)
;

Timestamp_value:
    (TIMESTAMP | TIMESTAMP_NULL)
;

Symbol_value:
    (IDENTIFIER | SYMBOL | SYMBOL_NULL)
;

String_value:
    (DOUBLEQUOTEDSTRING | TRIPLEQUOTEDSTRING+ | STRING_NULL)
;

Clob_value:
    (CLOB | CLOB_NULL)
;

Blob_value:
    (BLOB | BLOB_NULL)
;

Sexp:
    {Sexp} annot+=Annotation* ( '(' items+=Sexp_item* ')' | SEXP_NULL )
;

List:
    {List} annot+=Annotation* ( ('[' (items+=Value (',' items+=Value)* ','?)? ']') | LIST_NULL )
;

Struct:
    {Struct} annot+=Annotation* ( ('{' (items+=Field (',' items+=Field)* ','?)? '}') | STRUCT_NULL )
;

Sexp_item:
    Value | Unquoted_Operator
;

Unquoted_Operator:
    {Unquoted_Operator} annot+=Annotation* value=OP
;

Annotation:
    value=(IDENTIFIER | SYMBOL) '::'
;

Field:
    fieldName=Field_name ':' value=Value
;

Field_name:
    IDENTIFIER
    | SYMBOL
    | DOUBLEQUOTEDSTRING
    | TRIPLEQUOTEDSTRING+
;

// ========================== TERMINAL RULES ===========================


terminal
BOOL_NULL:
    'null.bool'
;

terminal
INT_NULL:
    'null.int'
;

terminal
FLOAT_NULL:
    'null.float'
;

terminal
DECIMAL_NULL:
    'null.decimal'
;

terminal
TIMESTAMP_NULL:
    'null.timestamp'
;

terminal
SYMBOL_NULL:
    'null.symbol'
;

terminal
STRING_NULL:
    'null.string'
;

terminal
CLOB_NULL:
    'null.clob'
;

terminal
BLOB_NULL:
    'null.blob'
;

terminal
SEXP_NULL:
    'null.sexp'
;

terminal
LIST_NULL:
    'null.list'
;

terminal
STRUCT_NULL:
    'null.struct'
;

terminal
NULL:
    'null' | 'null.null'
;

terminal
BOOL:
    'true' | 'false'
;

terminal
INT:
    '0'
  | '-0'
  | '-'? '1'..'9' '0'..'9'* // Leading_Digits without the '0'
  | '-'? ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')+
;

terminal
FLOAT:
     '-'? DEC_UNSIGNED_INTEGER DEC_FRAC? ('E' | 'F' | 'e' | 'f') ( '+' | '-' )? ('0'..'9')+
  |  'nan'
  |  ( '+' | '-' ) 'inf'
;

terminal
DECIMAL:
     '-'? DEC_UNSIGNED_INTEGER DEC_FRAC
  |  '-'? DEC_UNSIGNED_INTEGER DEC_FRAC? DECIMAL_EXP
;

terminal fragment
DECIMAL_EXP
    : ('D' | 'd') PLUS_OR_MINUS? DEC_DIGIT+
    ;

terminal
TIMESTAMP:
      FOURDIGITS 'T' TIMEOFFSET?
    | FOURDIGITS '-' TWODIGITS 'T' TIMEOFFSET?
    | FOURDIGITS '-' TWODIGITS '-' TWODIGITS ( 'T' TIMEOFFSET? )?
    | FOURDIGITS '-' TWODIGITS '-' TWODIGITS 'T' TWODIGITS TIMEOFFSET?
    | FOURDIGITS '-' TWODIGITS '-' TWODIGITS 'T' TWODIGITS ':' TWODIGITS TIMEOFFSET?
    | FOURDIGITS '-' TWODIGITS '-' TWODIGITS 'T' TWODIGITS ':' TWODIGITS ':' TWODIGITS ('.' ('0'..'9')* )? TIMEOFFSET?
;



terminal fragment
TIMEOFFSET:
     'z'
  |  'Z'
  |  ('+' | '-') TWODIGITS (':' TWODIGITS)?
;

terminal
SYMBOL:
    "'" ( ESCAPESEQUENCE  | SINGLEQUOTEDCHAR )+ "'"
;

terminal
DOUBLEQUOTEDSTRING:
    '"' ( NEWLINE_ESCAPE | ESCAPESEQUENCE | DOUBLEQUOTEDCHAR )* '"'
;

terminal
TRIPLEQUOTEDSTRING:
    "'''"
    ( ESCAPESEQUENCE | TRIPLEQUOTEDCHAR | JUST_ONEQUOTE | JUST_TWOQUOTE )*
    "'''"
;

terminal fragment
DOUBLEQUOTEDCLOB:
    '"' ( NEWLINE_ESCAPE | CLOB_ESCAPE | DOUBLEQUOTED_CLOBCHAR )* '"'
;

terminal fragment
TRIPLEQUOTEDCLOB:
    "'''"
    ( CLOB_ESCAPE | TRIPLEQUOTED_CLOBCHAR | JUST_ONEQUOTE_CLOB | JUST_TWOQUOTE_CLOB )*
    "'''"
;

terminal
CLOB:
    '{{' WS* DOUBLEQUOTEDCLOB WS* '}}'
  | '{{' WS* (TRIPLEQUOTEDCLOB WS*)+ '}}'
;

terminal
OP:
    OPERATOR+
;

terminal //fragment
IDENTIFIER:
    ( '$' | '_' | 'A'..'Z' | 'a'..'z' )  ( '$' | '_' | 'A'..'Z' | 'a'..'z' | '0'..'9' )*
;

terminal fragment
DOUBLEQUOTED_CLOBCHAR:
      '\u0020'..'\u0021'
    // skip \u0022 - double quote
    | '\u0023'..'\u005B'
    // skip \u005C - backslash
    | '\u005D'..'\u007F'
    // end of ASCII
;

terminal fragment
TRIPLEQUOTED_CLOBCHAR:
      '\u000A'                      // new line
    | '\u000D'                      // carriage return
    | '\u0020'..'\u0026'
    //  we don't skip the singe quote - but we recognize it distinctly
    | '\u0028'..'\u005B'
    // skip \u005C - backslash
    | '\u005D'..'\u007E'
    // end of ASCII
    | NEWLINE_ESCAPE
;

terminal fragment
SINGLEQUOTEDCHAR:
      //'\u0008'                      // tab - causes error in Xtext
    '\t'
    | '\u0020'..'\u0026'              // space through andpersand
    //  skip \u0027 - singe quote
    | '\u0028'..'\u005B'              // open paren through close brace
    // skip '\u005C' backslash
    | '\u005D'..'\u007e'              // open brace through tilde, end of ASCII
    // skip '\u007f' del
    | '\u0080'..'\ufffd'              // rest of the 16 bit code points
    // skip '\uffff' - causes error in Xtext
;

terminal fragment
DOUBLEQUOTEDCHAR:
       //'\u0008'                     // tab - causes error in Xtext
     '\t'
     |  DOUBLEQUOTED_CLOBCHAR
     | '\u0080'..'\ufffd'              // rest of the 16 bit code points
     // skip '\uffff' - causes error in Xtext
;

terminal fragment
TRIPLEQUOTEDCHAR:
    //'\u0008'                      // tab - causes error in Xtext
      '\t'
    | '\u000A'                      // new line
    | '\u000D'                      // carriage return
    | '\u0020'..'\u0026'            // space through andpersand
    //  we don't skip the singe quote - but we recognize it distinctly
    | '\u0028'..'\u005B'            // open paren through close brace
    // skip '\u005C' backslash
    | '\u005D'..'\u007e'            // open brace through tilde, end of ASCII
    // skip '\u007f' del
    | '\u0080'..'\ufffd'            // rest of the 16 bit code points
    | NEWLINE_ESCAPE
;

terminal fragment
JUST_ONEQUOTE:
    "'" (ESCAPESEQUENCE | TRIPLEQUOTEDCHAR)
;

terminal fragment
JUST_TWOQUOTE:
    "''" (ESCAPESEQUENCE | TRIPLEQUOTEDCHAR)
;

terminal fragment
JUST_ONEQUOTE_CLOB:
    "'" (CLOB_ESCAPE | TRIPLEQUOTED_CLOBCHAR)
;

terminal fragment
JUST_TWOQUOTE_CLOB:
    "''" (CLOB_ESCAPE | TRIPLEQUOTED_CLOBCHAR)
;

// === Detect bad tokens and treat them as errors in IonJavaValidation ===
terminal
BAD_NULLTYPE:
    'null.' (IDENTIFIER)
;

// TODO Trap invalid leading zeroes, eg 0123
terminal
BAD_INT:
    INT (IDENTIFIER | INT | '/')
;

terminal
BAD_FLOAT:
    FLOAT (IDENTIFIER | INT | '/')
;

terminal
BAD_DECIMAL:
    DECIMAL (IDENTIFIER | INT | '/')
;

terminal
BAD_TIMESTAMP:
    TIMESTAMP (IDENTIFIER | INT | '/')
;
// =========================

terminal fragment
CLOB_ESCAPE:
    COMMON_ESCAPE | HEX_ESCAPE
;

terminal fragment
ESCAPESEQUENCE:
      COMMON_ESCAPE
    | HEX_ESCAPE
    | U_ESCAPE
    | UU_ESCAPE
;


//////////////////////////////////////////////////////////////////////////////
// Ion BLOB
//////////////////////////////////////////////////////////////////////////////

terminal
BLOB
    : LOB_START WS* BASE_64_QUARTET* BASE_64_PAD? LOB_END
    ;

terminal fragment
BASE_64_PAD
    : BASE_64_PAD1
    | BASE_64_PAD2
    ;

terminal fragment
BASE_64_QUARTET
    : BASE_64_CHAR WS* BASE_64_CHAR WS* BASE_64_CHAR WS* BASE_64_CHAR WS*
    ;

terminal fragment
BASE_64_PAD1
    : BASE_64_CHAR WS* BASE_64_CHAR WS* BASE_64_CHAR WS* '=' WS*
    ;

terminal fragment
BASE_64_PAD2
    : BASE_64_CHAR WS* BASE_64_CHAR WS* '=' WS* '=' WS*
    ;

terminal fragment
BASE_64_CHAR
    : '0'..'9'
    | 'a'..'z'
    | 'A'..'Z'
    | '+'
    | '/'
    ;


//////////////////////////////////////////////////////////////////////////////
// Common Lexical Primitives
//////////////////////////////////////////////////////////////////////////////

terminal fragment
LOB_START
    : '{{'
    ;

terminal fragment
LOB_END
    : '}}'
    ;

terminal fragment
NEWLINE_ESCAPE:
    '\\' '\r'? '\n'
;

terminal fragment
DEC_UNSIGNED_INTEGER :
    '0'
  | '1'..'9' (UNDERSCORE? DEC_DIGIT)*
;

terminal fragment
DEC_FRAC
    : '.'
    | '.' DEC_DIGIT (UNDERSCORE? DEC_DIGIT)*
    ;

terminal fragment
DEC_DIGIT
    : '0'..'9'
    ;

terminal fragment
TWODIGITS:
    '0'..'9' '0'..'9'
;

terminal fragment
FOURDIGITS:
    '0'..'9' '0'..'9' '0'..'9' '0'..'9'
;

terminal fragment
HEXDIGIT:
      '0'..'9'
    | 'a'..'f'
    | 'A'..'F'
;

terminal fragment
PLUS_OR_MINUS
    : ( '+' | '-' )
    ;

terminal fragment
OPERATOR:
     '!' // = 33
  |  '#' // = 35  TODO: this is not included in the C parser
  |  '%' // = 37
  |  '&' // = 38
  |  '*' // = 42
  |  '+' // = 43
  |  '-' // = 45
  |  '.' // = 46
  |  '/' // = 47
  |  ';' // = 59
  |  '<' // = 60
  |  '=' // = 61
  |  '>' // = 62
  |  '?' // = 63
  |  '@' // = 64
  |  '^' // = 94
  |  '`' // = 96
  |  '|' // =124
  |  '~' // =126
;

terminal fragment
COMMON_ESCAPE
    : '\\' COMMON_ESCAPE_CODE
    ;

terminal fragment
COMMON_ESCAPE_CODE
    : 'a'
    | 'b'
    | 't'
    | 'n'
    | 'f'
    | 'r'
    | 'v'
    | '?'
    | '0'
    | '\''
    | '"'
    | '/'
    | '\\'
//  | NL    // FIXME
    ;

terminal fragment
HEX_ESCAPE
    : '\\' 'x' HEXDIGIT HEXDIGIT
    ;

terminal fragment
U_ESCAPE
    : '\\' 'u' HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT
    ;

terminal fragment
UU_ESCAPE
    : '\\' 'U' HEX_DIGIT_QUARTET HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT
    ;

terminal fragment
HEX_DIGIT_QUARTET
    : HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT
    ;

terminal
WS
  :  '\t'
  |  '\n'
//|  '\u000C' //causes error in xtext TODO
  |  '\r'
  |  ' '
  |  '\\' ('\r')? '\n'
;

terminal
ML_COMMENT:
    '/*' -> '*/'
;

terminal
SL_COMMENT:
    '//' !('\n'|'\r')* ('\r'? '\n')?
;


terminal fragment
UNDERSCORE
    : '_'
    ;
